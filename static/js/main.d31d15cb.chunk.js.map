{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","constants.js","containers/App.js","action.js","reducers.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","id","email","className","src","alt","CardList","robots","map","robot","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCES","REQUEST_ROBOTS_FAILED","App","this","onRequestRobots","searchField","onSearchChange","isPending","FilterRobots","filter","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d31d15cb.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nconst Card = ({name, id, email}) => {\r\n  return(\r\n    <div className=' tc bg-light-green dib grow shadow-5 pa3 ma2 br3'>\r\n      <img src={`https://robohash.org/${id}?200*200`} alt='robots' />\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList= ({robots}) => {\r\n  return(\r\n    <div>\r\n      {\r\n        robots.map((robot,i) => {\r\n          return(\r\n            <Card \r\n              key={i} \r\n              name={robots[i].name} \r\n              id={robots[i].id} \r\n              email={robots[i].email}\r\n            />\r\n            );\r\n        })\r\n      }\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n  return(\r\n    <div>\r\n      <input\r\n        className='bg-lightest-blue bg--light br2 ma2 pa3' \r\n        type='search' \r\n        placeholder='Search Robots'\r\n        onChange={searchChange}\r\n       />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return(\r\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px' }} >\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCES = 'REQUEST_ROBOTS_SUCCES';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport { setSearchField, requestRobots} from '../action';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\n\r\nclass App extends Component  {\r\n  \r\n  componentDidMount () {\r\n    this.props.onRequestRobots()\r\n  }\r\n\r\n  render() {\r\n  \r\n    const {searchField, onSearchChange, robots, isPending } = this.props;\r\n    const FilterRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()))\r\n    return isPending ? <h1>LOADING</h1>: \r\n      (\r\n        <div className='tc'>\r\n          <h1>RoboFriends</h1>\r\n          <SearchBox searchChange = {onSearchChange} />\r\n          <Scroll>\r\n            <CardList robots={FilterRobots}/>\r\n          </Scroll>         \r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCES,REQUEST_ROBOTS_FAILED} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n  .then(response => response.json())\r\n  .then(data=> dispatch({type:REQUEST_ROBOTS_SUCCES, payload: data}))\r\n  .catch(error=> dispatch({type:REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCES,REQUEST_ROBOTS_FAILED} from './constants'\r\n\r\n\r\nconst initialStateSearch = {\r\n  searchField: '',\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch(action.type) {\r\n    case CHANGE_SEARCH_FIELD: \r\n      return Object.assign({}, state, {searchField: action.payload});\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action={}) => {\r\n  switch (action.type){\r\n    case REQUEST_ROBOTS_PENDING :\r\n      return Object.assign({}, state, {isPending:true})\r\n    case REQUEST_ROBOTS_SUCCES :\r\n      return Object.assign({}, state, {isPending: false, robots: action.payload})\r\n    case REQUEST_ROBOTS_FAILED: \r\n      return Object.assign({}, state, {error: action.payload, isPending: false})\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport App from './containers/App';\nimport './containers/App.css';\nimport { Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport { searchRobots, requestRobots } from './reducers';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots,requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\n\nReactDOM.render(\n    <Provider store={store}>\n      <App/>\n    </Provider>\n\n  ,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}